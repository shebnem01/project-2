generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider      = "mongodb"
  url           = env("DATABASE_URL")
  relationMode  = "prisma"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  brand       String
  category    String
  inStock     Boolean
  image       String
  reviews     Review[]
  basketItems BasketItem[] 
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  productId   String   @db.ObjectId
  rating      Int
  comment     String
  createdDate DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Listing {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  imageSrc      String
  createdAt     DateTime @default(now())
  category      String
  roomCount     Int
  locationValue String
  userId        String   @db.ObjectId

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  favoriteIds    String[]      @db.ObjectId
  role           Role          @default(USER)
  accounts       Account[]
  reviews        Review[]
  listings       Listing[]
  reservations   Reservation[]
  basket         Basket?       
}

enum Role {
  USER
  ADMIN
}

model Basket {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  userId    String        @unique @db.ObjectId
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     BasketItem[]
}

model BasketItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  basketId  String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int      @default(1)

  basket    Basket   @relation(fields: [basketId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([basketId, productId])
}
